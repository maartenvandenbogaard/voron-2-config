[gcode_macro PRINT_START]
description: Machine heatup procedure before starting a print
gcode:
    # Extruder and bed temperatures
    {% set BED_TEMP = params.BED_TEMP|int %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|int %}
    {% set S_EXTRUDER_TEMP = 150|float %}
    {% set initial_tool = params.TOOL|default("0")|int %}

    # Optionnal Z adjustement from the slicer profile (ex. use it if you have textured vs smooth slicer profiles) 
    {% set Z_ADJUST = params.Z_ADJUST|default(0)|float %}
    
    # # Heatsoak time of the bed in minutes and chamber temperature wanted
    # {% set SOAK = params.SOAK|int %}
    # {% set CHAMBER_TEMP = params.CHAMBER|int %}
    # {% set CHAMBER_MAXTIME = params.CHAMBER_MAXTIME|int %}
    
    # Default material type to 'XXX'
    {% set MATERIAL = params.MATERIAL|default(printer["gcode_macro _USER_VARIABLES"].print_default_material)|string %}

    CLEAR_PAUSE
    #UPDATE_DELAYED_GCODE ID=gradual_cooldown DURATION=0 # cancel outstanding cooldown
    # BED_MESH_CLEAR
    # SET_GCODE_OFFSET Z=0 # reset any running z-offset

    M140 S{BED_TEMP} # heat bed don't wait
    # M104 S150 # heat extruder don't wait

    G32

    M190 S{BED_TEMP} # heat bed and wait

    # Fine adjustement of z offset from the slicer profile (like when using textured/smooth pei)
    SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1

    # # Material dependant parameters like PA, firmware retraction, Z_offset, etc...
    RESPOND MSG="Material: {MATERIAL}"
    {% if MATERIAL == "PLA" %}
    	SET_GCODE_OFFSET Z_ADJUST=0.05 MOVE=1
        SET_PRESSURE_ADVANCE ADVANCE=0.035
    {% elif MATERIAL == "PET" or MATERIAL == "PETG" %}
        SET_GCODE_OFFSET Z_ADJUST=0.08 MOVE=1
        SET_PRESSURE_ADVANCE ADVANCE=0.07
    {% elif MATERIAL == "ASA" or MATERIAL == "ABS" %}
        # SET_PRESSURE_ADVANCE ADVANCE=0.035 #G2E
        SET_PRESSURE_ADVANCE ADVANCE=0.03 #CW2
    {% endif %}

    BED_MESH_CALIBRATE ADAPTIVE=1
    M109 S{EXTRUDER_TEMP} # extruder target temp
    T{initial_tool} #Load Initial Tool

    # Gets ready to print by doing a purge line and updating the SB-leds
    RESPOND MSG="Printer goes brr"          # Displays info
  
    # LINE_PURGE
    PRIMELINE
    STATUS_BUSY

[delayed_gcode gradual_cooldown]
gcode:
    {% if printer.heater_bed.target > 40 %}
        M118 reduce temp to ({printer.heater_bed.target - 5 }C).
        M140 S{ printer.heater_bed.target - 5 }
        UPDATE_DELAYED_GCODE ID=gradual_cooldown DURATION=300
    {% else %}
        M118 Gradual bed cooling finished ({printer.heater_bed.temperature}C).
        M140 S0 ; turn off bed
        M118 Print Complete!
    {% endif %}

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 3, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    
    # _TIP_SHAPING
    
    #G1 E-5.0 F1800                 ; retract filament
    G1 E-18 F800 ;retract filament from meltzone Revo

    BT_TOOL_UNLOAD

    TURN_OFF_HEATERS
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
    STATUS_READY
    
    M84 ; motors off

#    {% if printer.heater_bed.temperature > 70 %}
#        M118 Start gradual bed cooling ({printer.heater_bed.temperature}C).
#        M118 reduce temp to ({printer.heater_bed.temperature - 5 }C).
#        M140 S{ printer.heater_bed.target - 5 }
#        UPDATE_DELAYED_GCODE ID=gradual_cooldown DURATION=300
#    {% else %}
#        M118 No Gradual bed cooling necessary ({printer.heater_bed.temperature}C).
#        M140 S0 ; turn off bed
#        M118 Print Complete!
#    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
description: Cancel the print, retract 5mm of filament and park
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 3, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_CANCEL_PRINT

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder

    G90                                      ; absolute positioning
    G1 E-1.7 F2100 ; retract filament a bit
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear

    G1 E-18 F800 ;retract filament from meltzone Revo
    TURN_OFF_HEATERS

    M107                                     ; turn off fan

    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_CANCEL_PRINT MOVE=0
    STATUS_READY
    BASE_CANCEL_PRINT


[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0 # reset any running z-offset

    M104 S150 # heat extruder don't wait

    M117 Homing...
    G90 # use absolute coordinates
    G28 # home

    # Voron Tap probe temp
    M109 S150

    AFC_BRUSH # brush nozzle

    QUAD_GANTRY_SCAN
    G28 Z # home Z again

[gcode_macro PRIMELINE]
gcode:
    # Base macro parameters
    {% set prime_line_length = params.LINE_LENGTH|default(45)|float %}
    {% set prime_line_purge_distance = params.PURGE_LENGTH|default(30)|float %}
    {% set prime_line_flowrate = params.FLOWRATE|default(10)|float %}
    {% set prime_line_height = params.LINE_HEIGHT|default(0.6)|float %}
    {% set prime_line_adaptive = params.ADAPTIVE_MODE|default(1)|int %}
    {% set prime_line_margin = params.LINE_MARGIN|default(5.0)|float %} # Used only in adaptive mode
    
    # If the SIZE parameter is defined and not a dummy placeholder, we use it to do the adaptive bed mesh logic
    {% set coordinatesFound = false %}
    {% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
        {% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
        {% set coordinatesFound = true %}
    {% elif printer.exclude_object is defined %}
        {% if printer.exclude_object.objects %}
            # Else if SIZE is not defined, we fallback to use the [exclude_object] tags
            # This method is derived from Kyleisah KAMP repository: https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging)
            {% set eo_points = printer.exclude_object.objects|map(attribute='polygon')|sum(start=[]) %}
            {% set xMinSpec = eo_points|map(attribute=0)|min %}
            {% set yMinSpec = eo_points|map(attribute=1)|min %}
            {% set xMaxSpec = eo_points|map(attribute=0)|max %}
            {% set yMaxSpec = eo_points|map(attribute=1)|max %}
            {% set coordinatesFound = true %}
        {% endif %}
    {% endif %}

    # We get the default prime line position parameters
    {% set prime_line_x, prime_line_y = 5, 2.5|map('float') %}
    {% set prime_line_x = params.START_X|default(prime_line_x)|float %}
    {% set prime_line_y = params.START_Y|default(prime_line_y)|float %}
    {% set prime_line_direction = params.LINE_DIRECTION|default("X")|string|upper %}

    {% set center_x, center_y = [printer.toolhead.axis_maximum.x / 2, printer.toolhead.axis_maximum.y / 2]|map("float") %}
    
    # If first layer coordinates are retrieved and adaptive mode is enabled, then we replace the coordinates to
    # do an adaptive purge while being careful to have the line stay on the bed when the first layer
    # is in an opposite bed quadrant than the prime line initial coordinates (due to mirrored coordinates from center axes)...
    {% if coordinatesFound and prime_line_adaptive == 1 %}
        {% set prime_line_x = 2*center_x - prime_line_x if (prime_line_x > center_x and xMaxSpec < center_x) or (prime_line_x < center_x and xMinSpec > center_x) 
                               else prime_line_x %}
        {% set prime_line_y = 2*center_y - prime_line_y if (prime_line_y > center_y and yMaxSpec < center_y) or (prime_line_y < center_y and yMinSpec > center_y) 
                               else prime_line_y %}
        {% set prime_line_x = [[prime_line_x, xMinSpec - prime_line_margin]|max, xMaxSpec + prime_line_margin]|min %}
        {% set prime_line_y = [[prime_line_y, yMinSpec - prime_line_margin]|max, yMaxSpec + prime_line_margin]|min %}
    {% endif %}

    # Choose the way of printing the primeline (in + or -) alongside the direction to avoid going outside the bed boundaries
    {% set prime_line_way = -1 if (prime_line_direction == "X" and prime_line_x > center_x) or (prime_line_direction == "Y" and prime_line_y > center_y) else 1 %}

    {% set St = 350 * 60 %}
    {% set Sz = 15 * 60 %}
    {% set verbose = True %}

    {% set klippain_mmu_enabled = False %}
    {% set filament_sensor_enabled = False %}
    {% set re_enable_filament_sensor = 0 %}

    {% set max_extrude_cross_section = printer["configfile"].config["extruder"]["max_extrude_cross_section"]|float %}
    {% set filament_diameter = printer["configfile"].config["extruder"]["filament_diameter"]|float %}
    
    # We first compute the width of the prime line
    {% set purge_volume = prime_line_purge_distance * 3.14159 * (filament_diameter / 2)**2 %}
    {% set line_width = purge_volume / (prime_line_height * prime_line_length) %}

    # Then we check that the prime line cross section will not be problematic (exceeding Klipper max_extrude_cross_section)
    # or, if it's the case, we warn the user and add a correction to the length of filament to be purged
    {% if (prime_line_height * line_width) > max_extrude_cross_section %}
        {% if verbose %}
            {action_respond_info("The prime_line_purge_distance of %.4f mm is too high and will exceed the max_extrude_cross_section!" % prime_line_purge_distance)}
        {% endif %}
        {% set prime_line_purge_distance = 0.98 * (max_extrude_cross_section * prime_line_length) / (3.14159 * (filament_diameter / 2)**2) %}
        {% set purge_volume = prime_line_purge_distance * 3.14159 * (filament_diameter / 2)**2 %}
        {% set line_width = purge_volume / (prime_line_height * prime_line_length) %}
        {% if verbose %}
            {action_respond_info("Klippain corrected the prime_line_purge_distance to %.4f mm" % prime_line_purge_distance)}
        {% endif %}
    {% endif %}

    # We then compute the height to width ratio and validate that the prime line will not be too thin
    {% if (prime_line_height / line_width) >= 0.5 %} # TODO: validate this 1/2 ratio is good for all
        {action_raise_error("The prime line will be too thin and will probably not stick properly to the bed. Increase its purge distance or decrease its length!")}
    {% endif %}

    # Finally we compute the speed to get the correct flowrate for the prime line
    {% set speed = (prime_line_flowrate / (prime_line_height * line_width)) * 60 |float %}

    {% if klippain_mmu_enabled %}
        _KLIPPAIN_MMU_SET_CLOGDETECTION STATE=0
    {% endif %}

    {% if filament_sensor_enabled %}
        {% if (printer['filament_motion_sensor runout_sensor'] is defined and printer['filament_motion_sensor runout_sensor'].enabled) or (printer['filament_switch_sensor runout_sensor'] is defined and printer['filament_switch_sensor runout_sensor'].enabled) %}
            SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=0
            {% set re_enable_filament_sensor = 1 %}
        {% endif %}
    {% endif %}

    G91
    M83
    {% if (printer.toolhead.position.z < 5) %}
        G1 Z5 F{Sz}
    {% endif %}

    # Starting position
    G90
    G0 X{prime_line_x} Y{prime_line_y} F{St}
    G1 Z{prime_line_height} F{Sz|int / 2}

    # Add pressure in the nozzle
    G92 E0
    G1 E18 F300

    # Prime line
    G92 E0
    {% if prime_line_direction == "X" %}
        G1 X{prime_line_x + prime_line_way*prime_line_length} E{prime_line_purge_distance} F{speed}
    {% elif prime_line_direction == "Y" %}
        G1 Y{prime_line_y + prime_line_way*prime_line_length} E{prime_line_purge_distance} F{speed}
    {% else %}
        { action_respond_error("Prime line direction is not valid. Choose either X or Y in the variables.cfg file!") }
    {% endif %}

    # Retract and Z-hop
    G92 E0
    G1 E-0.2 F2100
    G92 E0
    G1 Z3 F{Sz}

    # Additional small movement to get out of the line as some slicers directly emmit
    # a Z- move as a first step that make the toolhead crash back in the line and get dirty
    G91
    G1 X2 Y2 F{St}
    G90
    
    # Flushing Klipper's buffer to ensure the primeline sequence is done before continuing
    M400

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
description: Pause the print and park
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE

[gcode_macro RESUME]
rename_existing: BASE_RESUME
description: Resume the print after an optional unretract
gcode:
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}

    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED={St}
    BASE_RESUME

#[gcode_macro PAUSE]
#description: Pause the actual running print
#rename_existing: PAUSE_BASE
#gcode:
#  PAUSE_BASE
#
#[gcode_macro RESUME]
#description: Resume the actual running print
#rename_existing: RESUME_BASE
#gcode:
#  RESUME_BASE
